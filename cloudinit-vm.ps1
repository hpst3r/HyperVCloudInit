<#
.SYNOPSIS
Creates an intializes a VM from a Cloud-init ready VHDX.

.DESCRIPTION
REQUIRES OSCDIMG!

(irm https://go.microsoft.com/fwlink/?linkid=2196127 -method GET -outfile adksetup.exe) |
.\adksetup.exe

Install the Deployment Tools package!

Creates a Cloud-init NoCloud Joliet-format ISO with meta-data
and user-data passed to the function as parameters.

Creates a VM, configures the VM, attaches generated Cloud-init drive,
and removes the Cloud-init drive from the VM when complete.

.PARAMETER VMName
MANDATORY String: the hostname and Hyper-V VM name of the new VM.

.PARAMETER VMSwitchName
MANDATORY String: the name of the VMSwitch to which the new VM will be attached.

.PARAMETER OriginalVHDXPath
MANDATORY String: the path to the VHDX that will be cloned.

.PARAMETER CloudInitMetadataPath
OPTIONAL String: the path to the directory where Cloud-init metadata will be generated.

.PARAMETER CloudInitMetadataOutPath
OPTIONAL String: the path where the Cloud-init ISO file will be created

.PARAMETER Username
OPTIONAL String: the user to create via Cloud-init. Default: cloud-user

.PARAMETER PublicKey
OPTIONAL String: the public key to populate for the created user.

.PARAMETER IPv4Address
OPTIONAL ipaddress: the IPv4 address to assign to the VM. If this is omitted, the VM will use DHCP.

.PARAMETER DefaultGateway
OPTIONAL ipaddress: the default gateway to configure.
Used only for static addressing (if IPv4Address is set.)

.PARAMETER PrefixLength
OPTIONAL short: the prefix length, in bits, to configure.
Used only for static addressing.

.PARAMETER DNSServers
OPTIONAL ipaddress[]: array of ipaddresses to configure as DNS servers.

.PARAMETER HashedPassword
OPTIONAL SecureString: the password to assign to the user. If this is omitted, the user will have a random password generated by cloud-init.

.PARAMETER vCPUs
OPTIONAL short: the number of threads to assign to the VM. Default: 8

.PARAMETER Memory
OPTIONAL long: the number of bytes of memory to assign to the VM. Default: 8GB

.PARAMETER EnableSecureBoot
OPTIONAL bool: set Secure Boot enabled or disabled. Default: $true (enabled)

.PARAMETER SecureBootTemplate
OPTIONAL String: the Secure Boot template to apply to the VM's UEFI

.PARAMETER Force
OPTIONAL switch: overwrite existing files, if applicable

.EXAMPLE
$VMParameters = @{
    VMName = 'grafana'
    VMSwitchName = 'nat'
    Username = 'liam'
    PublicKey = 'ssh-ed25519 aabbccddeeff'
    OriginalVHDXPath = 'D:\ISOs\AlmaLinux-9-GenericCloud-latest.x86_64.vhdx'
}

CloudInit-VM @VMParameters

#>
Function CloudInit-VM {
	param (
		[Parameter(Mandatory)]
        [string]$VMName,
        [Parameter(Mandatory)]
		[string]$VMSwitchName,
        [Parameter(Mandatory)]
		[string]$OriginalVHDXPath,
		[string]$CloudInitMetadataPath =
            (Join-Path -Path $env:TEMP -ChildPath 'cloud-init'),
		[string]$CloudInitMetadataOutPath =
            (Join-Path -Path $env:TEMP -ChildPath 'cloud-init.iso'),
        [string]$Username = 'cloud-user',
        [string]$PublicKey,
        [ipaddress]$IPv4Address,
        [ipaddress]$Gateway,
        [short]$PrefixLength,
        [securestring]$HashedPassword,
		[short]$vCPUs = 8,
		[long]$Memory = 8GB,
        [string]$SecureBootTemplate = 'MicrosoftUEFICertificateAuthority',
        [bool]$EnableSecureBoot = $true,
        [switch]$Force
	)

    # validate parameters

    if ($UseDHCP -and $IPv4Address) {
        throw `
            'Error: -UseDHCP and -IPv4Address parameters are incompatible.'
    }

    if (-not $PublicKey -and -not $HashedPassword) {
        throw `
            'Error: neither a PublicKey nor a HashedPassword were provided. You will be unable to log in.'
    }

    # wrapper to populate a cloud-init metadata file on disk

	Function Set-MetadataFile {
		param (
			[string]$ParentPath,
			[string]$Content,
			[string]$MetadataType,
            [switch]$Force
		)

        if (-not (Test-Path -Path $ParentPath)) {

            New-Item `
                -ItemType Directory `
                -Path $ParentPath

        }

        $FullPath = (
            Join-Path `
                -Path $CloudInitMetadataPath `
                -ChildPath "$($MetadataType)-data"
            )

        Write-Host `
            "Generating $($MetadataType)-data file at $($FullPath)."

        if ($Force) {

            Remove-Item `
                -Path $FullPath `
                -Force
        
        }

        if (Test-Path -Path $FullPath) {

			throw `
				"$($MetadataType)-data file in $($ParentPath) already exists or still exists after attempted removal. Exiting."
							
		}

        $MetadataFile = @{
            Path = $FullPath
            Value = $Content
        }
        
        Set-Content @MetadataFile

	}

    # attempt to remove an existing cloud-init ISO if specified path exists
    # terminate the script if we are unable to do this.

    # if this is not done, there is an opportunity for VMs to be
    # created with unintended configuration, which could break stuff.

    try {

        if (Test-Path $CloudInitMetadataOutPath) {

            Write-Host `
                "$($CloudInitMetadataOutPath) already exists. Removing file so oscdimg.exe does not fail to overwrite the file."

            Remove-Item `
                -Path $CloudInitMetadataOutPath `
                -Force `
                -ErrorAction Stop

        }

    } catch {

        throw @"
Unable to overwrite metadata ISO:
$($_)
Terminating to avoid undesired VM state. Please remove file $($CloudInitMetadataOutPath) from any VMs it is attached to and try again.
"@
    }

	# populate the meta-data file
    
    Write-Host @"

## Generating meta-data file with: ##

instance-id: $($VMName)
local-hostname: $($VMName)

"@

    $MetadataFile = @{
        ParentPath = $CloudInitMetadataPath
        Content = @"
instance-id: $VMName
local-hostname: $VMName
"@
        MetadataType = 'meta'
        Force = $Force
    }

    Set-MetadataFile @MetadataFile

    # populate the user-data file with ssh public key and username

    # if you want to pass a password, generate it with mkpasswd, and add, under your user:
    # hashed_passwd: $(ConvertFrom-SecureString -SecureString $HashedPassword -AsPlainText)
    # and set lock_passwd to False

    Write-Host @"

## Generating user-data file with: ##

Name: $($Username)
Password set: $([bool]($HashedPassword))
Console PW auth: $([bool]($HashedPassword))
SSH key: $($PublicKey)
SSH PW auth: Disabled
Sudo: ALL=(ALL) NOPASSWD:ALL

"@

    $UserdataFile = @{
        ParentPath = $CloudInitMetadataPath
        Content = @"
#cloud-config
users:
- name: $Username
  $(if ($HashedPassword) { "passwd: $(ConvertFrom-SecureString -SecureString $HashedPassword -AsPlainText)`n  lock_passwd: False" } else { 'lock_passwd: True' } )
  groups: users,wheel
  sudo: ALL=(ALL) NOPASSWD:ALL
  shell: /bin/bash

  ssh_authorized_keys:
   - $PublicKey
  
ssh_pwauth: False
"@
        MetadataType = 'user'
        Force = $Force
    }

    Set-MetadataFile @UserdataFile

    # convert metadata files to a Joliet cloud-init ISO
	
	& C:\Program` Files` `(x86`)\Windows` Kits\10\Assessment` and` Deployment` Kit\Deployment` Tools\amd64\Oscdimg\oscdimg.exe -j1 -lcidata -r $CloudInitMetadataPath $CloudInitMetadataOutPath
	
	# make a copy of the base vhdx - put it under the configured default vhdx path on the host

	$NewVHDXPath = "$((Get-VMHost).VirtualHardDiskPath)\$($VMName).vhdx"
	
	Write-Host `
		"Checking for existence of path $($NewVHDXPath)."
		
	if (Test-Path -Path $NewVHDXPath) {
		# if the -Force flag IS NOT set, do not overwrite the existing VHDX and terminate.
		if (-not $Force) {
		
			throw `
				'Fatal: new VHDX path is already occupied and -Force is not set. We will not be able to create a new VM.'
			
		}
		
		# if the -Force flag IS set, attempt to remove the existing VHDX.
		# This WILL NOT SUCCEED if a VM is using said VHDX.
		
		if ($Force) {
		
			Write-Host `
				"-Force is set. Attempting to remove VHDX at $($NewVHDXPath)."
				
			try {
			
				Remove-Item `
					-Path $NewVHDXPath `
					-Force `
					-Confirm:$false `
					-ErrorAction 'Stop'
					
			} catch {
			
				throw @"
-Force is set, but failed to remove existing file at desired clone VHDX path $($NewVHDXPath).
$($_)
Terminating.
"@

			}
		}
	}

    # copy the VM template VHDX for our new VM.

	Write-Host `
		"Copying template VHDX from $($OriginalVHDXPath) to $($NewVHDXPath)."

	try {

		Copy-Item -Path $OriginalVHDXPath -Destination $NewVHDXPath

	} catch {

		throw `
			"Copy failed with error: $($_). Terminating."

	}

	Write-Host @"

## Attempting to create VM $($VMName) with specifications: ##

Threads: $($vCPUs)
Memory (Mb): $($Memory/([Math]::Pow(2,20)))
Switch: $($VMSwitchName)

"@

	try {
		# create the VM
		$VMParams = @{
			Name = $VMName
			SwitchName = $VMSwitchName
			Generation = 2
			MemoryStartupBytes = "$($Memory)" # is there a reason for this?
			ErrorAction = 'Stop'
		}
		
		$VM = New-VM @VMParams

	} catch {

		throw @"
Failed to create VM $($VMName) with error:
$($_)
Terminating script.
"@

	}

    # assign vCPUs
    Set-VMProcessor `
        -VM $VM `
        -Count $vCPUs
	
	# add the copy of the VHDX to the VM
    
    Write-Host `
        "Assigning clone VHDX $($NewVHDXPath) to VM $($VMName)."

    try {

        $VMDiskParams = @{
            VM = $VM
            ControllerType = 'SCSI'
            ControllerNumber = 0
            ControllerLocation = 0
            Path = $NewVHDXPath
            ErrorAction = 'Stop'
        }
        
        Add-VMHardDiskDrive @VMDiskParams

    } catch {

        throw `
            "Assigning VHDX $($NewVHDXPath) to VM $($VMName) failed with error: $($_). Terminating."

    }

    # configure Secure Boot as specified
    # default: Microsoft Third-Party UEFI Certification Authority
    # default: $enabled

    Write-Host @"
Setting $($VMName)'s Secure Boot settings:
Setting Secure Boot template to: $($SecureBootTemplate).
Enabling Secure Boot: $($EnableSecureBoot).
"@

    Set-VMFirmware `
        -VM $VM `
        -SecureBootTemplate $SecureBootTemplate `
        -EnableSecureBoot ([int]$EnableSecureBoot)
	
	# add the cloud-init metadata image to the VM

    Write-Host `
        "Assigning the $($CloudInitMetadataOutPath) metadata image to VM $($VMName)."
    
    try {

        $VMDvdParams = @{
            VM = $VM
            ControllerNumber = 0
            ControllerLocation = 1
            Path = $CloudInitMetadataOutPath
            ErrorAction = 'Stop'
        }
        
        Add-VMDvdDrive @VMDvdParams

    } catch {

        throw `
            "Failed to assign $($CloudInitMetadataOutPath) to VM $($VMName) with error: $($_). VM has been created, but will not be initialized. Terminating."

    }

    # make sure first boot device is the cloned VHDX

    Write-Host `
        "Setting VM $($VMName)'s first boot device to its hard drive (cloned VHDX)."

	Set-VMFirmware `
        -VM $VM `
        -FirstBootDevice (Get-VMHardDiskDrive -VM $VM)
	
	# start the VM

    Write-Host `
        "Starting VM $($VMName)."

	try {
    
        Start-VM `
            -VM $VM `
            -ErrorAction 'Stop'

    } catch {

        throw `
            "Failed to start VM $($VMName) with error: $($_)."

    }

    # wait for Cloud-init
    Write-Host `
        'Waiting 30 seconds for cloud-init.'

	Start-Sleep(30)
	
	# remove the Cloud-init disk

    Write-Host `
        "Removing cloud-init drive from VM $($VMName)."

	Remove-VMDVDDrive `
        -VMName $VM.Name `
        -ControllerNumber $VMDvdParams.ControllerNumber `
        -ControllerLocation $VMDvdParams.ControllerLocation

    Write-Host `
        "Deleting generated cloud-init drive at $($CloudInitMetadataOutPath)."

    Remove-Item `
        -Path $CloudInitMetadataOutPath `
        -Force

    Write-Host @"

Successfully created VM $($VMName) with:

Threads: $($vCPUs)
Memory (Mb): $($Memory/([Math]::Pow(2,20)))
Switch: $($VMSwitchName)

Original VHDX: $($OriginalVHDXPath)
Cloned VHDX: $($NewVHDXPath)

Generated cloud-init ISO: $($CloudInitMetadataOutPath)

"@

}